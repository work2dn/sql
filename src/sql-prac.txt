Q> Write a SQL query to get the second highest salary from the Employee table. 
If there is no second highest salary, then the query should return null.

Source: https://leetcode.com/problems/second-highest-salary/
------------------------------------------------------------------------
Approach: Using sub-query and LIMIT clause [Accepted]
------------------------------------------------------------------------

Algorithm

	Sort the distinct salary in descend order and then utilize the LIMIT clause to
	get	the second highest salary.
	
	SELECT DISTINCT  Salary AS SecondHighestSalary
	FROM
	    Employee
	ORDER BY Salary DESC
	LIMIT 1 OFFSET 1
	
	However, this solution will be judged as 'Wrong Answer' if there is no such 
	second highest salary since there might be only one record in this table. 
	To overcome this issue, we can take this as a temp table.
------------------------------------------------------------------------

MySQL

SELECT
    (SELECT DISTINCT
            Salary
        FROM
            Employee
        ORDER BY Salary DESC
        LIMIT 1 OFFSET 1) AS SecondHighestSalary;
        
        
------------------------------------------------------------------------

Approach: Using IFNULL and LIMIT clause [Accepted]

Another way to solve the 'NULL' problem is to use IFNULL funtion as below.

MySQL

SELECT
    IFNULL(
      (SELECT DISTINCT Salary
       FROM Employee
       ORDER BY Salary DESC
        LIMIT 1 OFFSET 1),
    NULL) AS SecondHighestSalary;

------------------------------------------------------------------------
DOUBT: TRY TO WORK ON THE SOLUTION BELOW
------------------------------------------------------------------------

Select max(vmx) as SecondHighestSalary 
	from (values (select salary from employee where salary < (SELECT MAX(Salary) 
	FROM Employee))) as vmx;
	
	

------------------------------------------------------------------------
ANOTHER SOLUTION
------------------------------------------------------------------------
	
	Select max(salary) as SecondHighestSalary 
	from EMPLOYEE 
	where salary < (SELECT MAX(Salary) FROM Employee);
	
	
-------*****--------*****--------*****--------*****--------*****--------*****--------


https://leetcode.com/problems/nth-highest-salary/

	177.) Nth Highest Salary
	
	Write a SQL query to get the nth highest salary from the Employee table.
	
	+----+--------+
	| Id | Salary |
	+----+--------+
	| 1  | 100    |
	| 2  | 200    |
	| 3  | 300    |
	+----+--------+
	For example, given the above Employee table, the nth highest salary where n = 2 is 200. If there is no nth highest salary, then the query should return null.
	
	+------------------------+
	| getNthHighestSalary(2) |
	+------------------------+
	| 200                    |
	+------------------------+
	
Solution:	
		  CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
		  BEGIN
			  SET N=N-1;
			  RETURN (
			      # Write your MySQL query statement below.
			      SELECT 
			        IFNULL((SELECT DISTINCT Salary
			               FROM Employee
			               ORDER BY Salary DESC
			               LIMIT 1 OFFSET N), NULL)
			      
			  );
		 END
	
	
-------*****--------*****--------*****--------*****--------*****--------*****--------
	
https://leetcode.com/problems/rank-scores/

178. Rank Scores

	Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no "holes" between ranks.
	
	+----+-------+
	| Id | Score |
	+----+-------+
	| 1  | 3.50  |
	| 2  | 3.65  |
	| 3  | 4.00  |
	| 4  | 3.85  |
	| 5  | 4.00  |
	| 6  | 3.65  |
	+----+-------+
	For example, given the above Scores table, your query should generate the following report (order by highest score):
	
	+-------+---------+
	| score | Rank    |
	+-------+---------+
	| 4.00  | 1       |
	| 4.00  | 1       |
	| 3.85  | 2       |
	| 3.65  | 3       |
	| 3.65  | 3       |
	| 3.50  | 4       |
	+-------+---------+
	Important Note: For MySQL solutions, to escape reserved words used as column names, you can use an apostrophe before and after the keyword. For example `Rank`.


Solution:
	(AS IF WE USE RANK FUNCTION THEN IT WILL "SKIP" THE CONSECUTIVE RANKINGS
			
		 https://www.sqlservertutorial.net/sql-server-window-functions/sql-server-dense_rank-function/
		 )
	
	SELECT Score as score,
	DENSE_RANK() OVER(ORDER BY Score DESC) AS `RANK`
	FROM Scores;
	================================================
	
	select s1.score ,
    (select count(distinct score) 
    from scores s2 
    where s2.score>=s1.score) as "rank" 
	from scores s1 
	order by s1.score desc;

-------*****--------*****--------*****--------*****--------*****--------*****--------

https://leetcode.com/problems/consecutive-numbers/

180. Consecutive Numbers

	Table: Logs
	
	+-------------+---------+
	| Column Name | Type    |
	+-------------+---------+
	| id          | int     |
	| num         | varchar |
	+-------------+---------+
	id is the primary key for this table.
	 
	
	Write an SQL query to find all numbers that appear at least three times consecutively.
	
	Return the result table in any order.
	
	The query result format is in the following example:
	
	 
	
	Logs table:
	+----+-----+
	| Id | Num |
	+----+-----+
	| 1  | 1   |
	| 2  | 1   |
	| 3  | 1   |
	| 4  | 2   |
	| 5  | 1   |
	| 6  | 2   |
	| 7  | 2   |
	+----+-----+
	
	Result table:
	+-----------------+
	| ConsecutiveNums |
	+-----------------+
	| 1               |
	+-----------------+
	1 is the only number that appears consecutively for at least three times.

Solution:


	SELECT DISTINCT l3.num AS ConsecutiveNums
	FROM 
	    Logs l1,
	    Logs l2,
	    Logs l3
	WHERE
	    l1.id = l2.id -1
	    AND l2.id = l3.id -1
	    AND l1.num = l2.num
	    AND l2.num = l3.num;
	    
====================================================================
	++++++++COULD NOT RUN THE ABOVE CODE AS FUNCTION BELOW++++++
	
	CREATE FUNCTION threeConsccutive(N int) returns INT
	BEGIN
		RETURN(
			SELECT DISTINCT l3.num
		FROM 
		    Logs l1,
		    Logs l2,
		    Logs l3
		WHERE
		    l1.id = l2.id -1
		    AND l2.id = l3.id -1
		    AND l1.num = l2.num
		    AND l2.num = l3.num;
		)
	END;
	
-------*****--------*****--------*****--------*****--------*****--------*****--------

https://leetcode.com/problems/employees-earning-more-than-their-managers/
181. Employees Earning More Than Their Managers

	The Employee table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.
	
	+----+-------+--------+-----------+
	| Id | Name  | Salary | ManagerId |
	+----+-------+--------+-----------+
	| 1  | Joe   | 70000  | 3         |
	| 2  | Henry | 80000  | 4         |
	| 3  | Sam   | 60000  | NULL      |
	| 4  | Max   | 90000  | NULL      |
	+----+-------+--------+-----------+
	Given the Employee table, write a SQL query that finds out employees who earn more than their managers. For the above table, Joe is the only employee who earns more than his manager.
	
	+----------+
	| Employee |
	+----------+
	| Joe      |
	+----------+
	

Solution:

	Select E.Name as Employee
	FROM Employee as E
	INNER JOIN Employee as M
	ON E.ManagerId=M.Id
	WHERE E.Salary > M.Salary;

====================================


SELECT e1.Name as Employee
FROM Employee as e1, Employee as e2
WHERE e1.ManagerId = e2.Id 
AND e1.Salary > e2.Salary;


-------*****--------*****--------*****--------*****--------*****--------*****--------

https://leetcode.com/problems/duplicate-emails/

182. Duplicate Emails
	
	Write a SQL query to find all duplicate emails in a table named Person.
	
	+----+---------+
	| Id | Email   |
	+----+---------+
	| 1  | a@b.com |
	| 2  | c@d.com |
	| 3  | a@b.com |
	+----+---------+
	For example, your query should return the following for the above table:
	
	+---------+
	| Email   |
	+---------+
	| a@b.com |
	+---------+
	Note: All emails are in lowercase.
	
Solution:
	
	Select email
	from Person
	Group by email
	having count(email) > 1;
	
	====================================
	Select email from
		(Select email, count(email) as num
		From Person
		Group by email) as email_n_count
	where num > 1;

-------*****--------*****--------*****--------*****--------*****--------*****--------

https://leetcode.com/problems/customers-who-never-order/

183. Customers Who Never Order

		Suppose that a website contains two tables, the Customers table and the Orders table. Write a SQL query to find all customers who never order anything.
	
	Table: Customers.
	
	+----+-------+
	| Id | Name  |
	+----+-------+
	| 1  | Joe   |
	| 2  | Henry |
	| 3  | Sam   |
	| 4  | Max   |
	+----+-------+
	Table: Orders.
	
	+----+------------+
	| Id | CustomerId |
	+----+------------+
	| 1  | 3          |
	| 2  | 1          |
	+----+------------+
	Using the above tables as example, return the following:
	
	+-----------+
	| Customers |
	+-----------+
	| Henry     |
	| Max       |
	+-----------+

Solution:
	
	Below is unnecessarily making the code complex:
	
		SELECT Res.Cname as Customers 
	    FROM  (Select C.Name AS Cname, O.Id AS OId
	            FROM Customers AS C
	            LEFT JOIN Orders AS O
	            ON C.Id=O.CustomerId) as Res
	    WHERE Res.OId is null;

	below is the improvement over the above:
		
		Select C.Name AS Customers
		FROM Customers AS C
		LEFT JOIN Orders AS O
		ON C.Id=O.CustomerId
		WHERE O.CustomerId is null;

	====================================

		Select C.Name AS Customers
		FROM Customers AS C
		WHERE c.id NOT IN
		(SELECT CustomerId FROM Orders);
		
		
-------*****--------*****--------*****--------*****--------*****--------*****--------
https://leetcode.com/problems/department-highest-salary/

184. Department Highest Salary

	The Employee table holds all employees. Every employee has an Id, a salary, and there is also a column for the department Id.
	
	+----+-------+--------+--------------+
	| Id | Name  | Salary | DepartmentId |
	+----+-------+--------+--------------+
	| 1  | Joe   | 70000  | 1            |
	| 2  | Jim   | 90000  | 1            |
	| 3  | Henry | 80000  | 2            |
	| 4  | Sam   | 60000  | 2            |
	| 5  | Max   | 90000  | 1            |
	+----+-------+--------+--------------+
	The Department table holds all departments of the company.
	
	+----+----------+
	| Id | Name     |
	+----+----------+
	| 1  | IT       |
	| 2  | Sales    |
	+----+----------+
	Write a SQL query to find employees who have the highest salary in each of the departments. For the above tables, your SQL query should return the following rows (order of rows does not matter).
	
	+------------+----------+--------+
	| Department | Employee | Salary |
	+------------+----------+--------+
	| IT         | Max      | 90000  |
	| IT         | Jim      | 90000  |
	| Sales      | Henry    | 80000  |
	+------------+----------+--------+
	Explanation:
	
	Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department.
	
Solution:
	
	Select D.Name AS 'Department', E.Name AS 'Employee', E.Salary AS 'Salary' 
	FROM Employee AS E
	INNER JOIN Department AS D
	ON E.DepartmentId=D.Id
	WHERE (E.DepartmentId, E.Salary) IN
	      	(SELECT DepartmentId, MAX(Salary)
	      	 FROM Employee
	      	 GROUP BY DepartmentId
      	 	)
 ;    
 
 -------*****--------*****--------*****--------*****--------*****--------*****--------
 
 https://leetcode.com/problems/department-top-three-salaries/
 
 185. Department Top Three Salaries(********VVI**********)
 	
 	Table: Employee

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| Id           | int     |
| Name         | varchar |
| Salary       | int     |
| DepartmentId | int     |
+--------------+---------+
Id is the primary key for this table.
Each row contains the ID, name, salary, and department of one employee.
 

Table: Department

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| Id          | int     |
| Name        | varchar |
+-------------+---------+
Id is the primary key for this table.
Each row contains the ID and the name of one department.
 

Write an SQL query to find employees who earn the top three salaries in each of the departments.

Return the result table in any order.

The query result format is in the following example:

 

Employee table:
+----+-------+--------+--------------+
| Id | Name  | Salary | DepartmentId |
+----+-------+--------+--------------+
| 1  | Joe   | 85000  | 1            |
| 2  | Henry | 80000  | 2            |
| 3  | Sam   | 60000  | 2            |
| 4  | Max   | 90000  | 1            |
| 5  | Janet | 69000  | 1            |
| 6  | Randy | 85000  | 1            |
| 7  | Will  | 70000  | 1            |
+----+-------+--------+--------------+

Department table:
+----+-------+
| Id | Name  |
+----+-------+
| 1  | IT    |
| 2  | Sales |
+----+-------+

Result table:
+------------+----------+--------+
| Department | Employee | Salary |
+------------+----------+--------+
| IT         | Max      | 90000  |
| IT         | Joe      | 85000  |
| IT         | Randy    | 85000  |
| IT         | Will     | 70000  |
| Sales      | Henry    | 80000  |
| Sales      | Sam      | 60000  |
+------------+----------+--------+

In the IT department, Max earns the highest salary, both Randy and Joe earn the second-highest salary, and Will earns the third-highest salary. There are only two employees in the Sales department, Henry earns the highest salary while Sam earns the second highest salary.

Solution:
	
	
 -------*****--------*****--------*****--------*****--------*****--------*****--------

 https://leetcode.com/problems/delete-duplicate-emails/
 
 196. Delete Duplicate Emails
 	
	 Write a SQL query to delete all duplicate email entries in a table named Person, keeping only unique emails based on its smallest Id.
	
	+----+------------------+
	| Id | Email            |
	+----+------------------+
	| 1  | john@example.com |
	| 2  | bob@example.com  |
	| 3  | john@example.com |
	+----+------------------+
	Id is the primary key column for this table.
	For example, after running your query, the above Person table should have the following rows:
	
	+----+------------------+
	| Id | Email            |
	+----+------------------+
	| 1  | john@example.com |
	| 2  | bob@example.com  |
	+----+------------------+
	Note:
	
	Your output is the whole Person table after executing your sql. Use delete statement

Solution:

		Delete from Person
			Where Id Not in (
				Select * from (
				    Select min(id)
				        from Person
				        Group By Email
				    ) as psn
				);
				
		====================================
		
		
		